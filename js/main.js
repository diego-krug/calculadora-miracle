/**
 * ===== ARQUIVO PRINCIPAL =====
 * Arquivo respons√°vel por coordenar todos os m√≥dulos,
 * inicializar a aplica√ß√£o e gerenciar o ciclo de vida
 */

// ===== VERIFICA√á√ÉO DE DEPEND√äNCIAS =====

/**
 * Verifica se todas as depend√™ncias necess√°rias est√£o carregadas
 * @returns {boolean} True se todas as depend√™ncias est√£o dispon√≠veis
 */
function checkDependencies() {
  const required = [
    'WEAPONS_DATA',
    'calculateRowData',
    'calculateMainKPIs',
    'calculateFinalKPIs',
    'sortRows',
    'formatNumber',
    'initializeUI'
  ];
  
  const missing = required.filter(dep => typeof window[dep] === 'undefined');
  
  if (missing.length > 0) {
    console.error('Depend√™ncias faltando:', missing);
    return false;
  }
  
  return true;
}

// ===== INICIALIZA√á√ÉO DA APLICA√á√ÉO =====

/**
 * Inicializa a aplica√ß√£o principal
 */
function initializeApp() {
  console.log('üöÄ Iniciando Calculadora de Treino...');
  
  // Verifica depend√™ncias
  if (!checkDependencies()) {
    console.error('‚ùå Falha ao inicializar: depend√™ncias n√£o encontradas');
    return;
  }
  
  try {
    // Inicializa o sistema de tema
    if (typeof initializeTheme === 'function') {
      initializeTheme();
      console.log('‚úÖ Sistema de tema inicializado');
    } else {
      console.warn('‚ö†Ô∏è Sistema de tema n√£o dispon√≠vel');
    }
    
    // Inicializa a interface
    initializeUI();
    
    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso!');
    console.log('üìä Total de itens:', WEAPONS_DATA.length);
    console.log('‚ö° Intervalo base fixo: 2 segundos');
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
  }
}

// ===== GEST√ÉO DO CICLO DE VIDA =====

/**
 * Fun√ß√£o executada quando o DOM estiver completamente carregado
 */
function onDOMReady() {
  // Pequeno delay para garantir que todos os scripts foram carregados
  setTimeout(() => {
    initializeApp();
  }, 100);
}

// ===== CONFIGURA√á√ÉO DE EVENT LISTENERS GLOBAIS =====

/**
 * Configura os event listeners globais da aplica√ß√£o
 */
function setupGlobalEventListeners() {
  // Event listener para quando o DOM estiver pronto
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', onDOMReady);
  } else {
    // DOM j√° est√° pronto
    onDOMReady();
  }
}

// ===== FUN√á√ïES DE UTILIDADE GLOBAIS =====

/**
 * Fun√ß√£o global para debug da aplica√ß√£o
 * √ötil para desenvolvimento e troubleshooting
 */
window.debugApp = function() {
  console.group('üêõ Debug da Aplica√ß√£o');
  console.log('Elementos DOM:', elements);
  console.log('Pre√ßos:', Array.from(prices.entries()));
  console.log('Dados dos itens:', WEAPONS_DATA);
  console.log('‚ö° Intervalo base fixo: 2 segundos');
  console.groupEnd();
};

/**
 * Fun√ß√£o global para resetar a aplica√ß√£o
 * √ötil para testes e desenvolvimento
 */
window.resetApp = function() {
  console.log('üîÑ Resetando aplica√ß√£o...');
  
  // Limpa pre√ßos
  if (typeof prices !== 'undefined') {
    prices.clear();
  }
  
  // Re-renderiza
  if (typeof renderTable === 'function') {
    renderTable();
  }
  
  console.log('‚úÖ Aplica√ß√£o resetada!');
};

// ===== INICIALIZA√á√ÉO AUTOM√ÅTICA =====

// Configura os event listeners globais
setupGlobalEventListeners();

// ===== EXPORTA√á√ÉO PARA DESENVOLVIMENTO =====

// Em desenvolvimento, exp√µe fun√ß√µes √∫teis no console
console.log('üîß Modo desenvolvimento ativo');
console.log('üìö Fun√ß√µes dispon√≠veis: debugApp(), resetApp()');
console.log('üí° Use debugApp() para inspecionar o estado da aplica√ß√£o');
console.log('‚ö° Intervalo base fixo: 2 segundos');
